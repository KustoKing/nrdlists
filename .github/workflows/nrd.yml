# GitHub Actions Workflow: Automated NRD Domain List Updates and Publishing
#
# This workflow fetches and processes domain lists from Stamus Networks Open-NRD,
# including "high entropy" and phishing domain feeds, as described at:
#   https://www.stamus-networks.com/blog/introducing-open-nrd#install
#
# Domain feeds courtesy of Stamus Networks (https://www.stamus-networks.com/)
# Licensed under GNU GPL v3 â€“ https://www.gnu.org/licenses/gpl-3.0.html
#
# If you reuse or adapt this workflow, please retain this notice and attribution.

name: Update NRD List

on:
  schedule:
    - cron: "10 1,3,5,7,9,11,13,15,17,19,21,23 * * *"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  update-nrd-list:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up system dependencies
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y unzip

      - name: Download NRD, Entropy, and Phishing Feeds
        env:
          STAMUS_NRD_30_URL: ${{ secrets.STAMUS_NRD_30_URL }}
          STAMUS_ENTROPY_30_URL: ${{ secrets.STAMUS_ENTROPY_30_URL }}
          STAMUS_PHISHING_30_URL: ${{ secrets.STAMUS_PHISHING_30_URL }}
          STAMUS_NRD_14_URL: ${{ secrets.STAMUS_NRD_14_URL }}
          STAMUS_ENTROPY_14_URL: ${{ secrets.STAMUS_ENTROPY_14_URL }}
          STAMUS_PHISHING_14_URL: ${{ secrets.STAMUS_PHISHING_14_URL }}
        run: |
          set -euo pipefail
          mkdir -p downloads
          curl -fsS -o downloads/nrd-30.tar.gz "$STAMUS_NRD_30_URL"
          curl -fsS -o downloads/entropy-30.tar.gz "$STAMUS_ENTROPY_30_URL"
          curl -fsS -o downloads/phishing-30.tar.gz "$STAMUS_PHISHING_30_URL"
          curl -fsS -o downloads/nrd-14.tar.gz "$STAMUS_NRD_14_URL"
          curl -fsS -o downloads/entropy-14.tar.gz "$STAMUS_ENTROPY_14_URL"
          curl -fsS -o downloads/phishing-14.tar.gz "$STAMUS_PHISHING_14_URL"

      - name: Extract downloaded archives
        run: |
          set -euo pipefail
          mkdir -p extracted
          for f in downloads/*.tar.gz; do
            tar -xzf "$f" -C extracted
          done

      - name: Debug List extracted files
        run: |
          echo "Extracted files:"
          ls -l extracted || true

      - name: Generate and compare hashes (or force if files missing)
        id: hash
        run: |
          set -euo pipefail
          mkdir -p hash
          CHANGED=0
          FILES_EXIST=1
          for file in nrd-30 entropy-30 phishing-30 nrd-14 entropy-14 phishing-14; do
            fpath=$(ls extracted/$file*.txt 2>/dev/null | head -n 1 || true)
            if [ ! -f "$fpath" ]; then
              echo "$file missing, will force processing"
              FILES_EXIST=0
            fi
          done
          if [ "$FILES_EXIST" -eq 0 ]; then
            CHANGED=1
          else
            for file in nrd-30 entropy-30 phishing-30 nrd-14 entropy-14 phishing-14; do
              fpath=$(ls extracted/$file*.txt 2>/dev/null | head -n 1 || true)
              if [ -n "$fpath" ]; then
                sha256sum "$fpath" > "hash/current_$file.txt"
                if [ ! -f "hash/previous_$file.txt" ] || ! cmp -s "hash/previous_$file.txt" "hash/current_$file.txt"; then
                  echo "$file changed"
                  CHANGED=1
                fi
              fi
            done
          fi
          echo "changed=$CHANGED" >> $GITHUB_ENV

      - name: Abort if no input changes detected
        if: env.changed == '0'
        run: echo "No changes detected. Exiting early."

      - name: Apply TLD and Top-1M domain filtering
        if: env.changed != '0'
        run: |
          set -euo pipefail
          # TLD filtering
          curl -fsS -O https://data.iana.org/TLD/tlds-alpha-by-domain.txt
          awk '{print tolower($0)}' tlds-alpha-by-domain.txt > iana-tlds.txt
          for file in extracted/*.txt; do
            grep -vFxf iana-tlds.txt "$file" > "$file.tmp" && mv "$file.tmp" "$file"
          done

          # Top-1M filtering
          mkdir -p top1m

          # Cisco Umbrella
          curl -fsS -o top1m/umbrella.zip "https://s3-us-west-1.amazonaws.com/umbrella-static/top-1m.csv.zip"
          unzip -jo top1m/umbrella.zip '*.csv' -d top1m/
          awk -F, '{print $2}' top1m/*.csv > top1m/umbrella.txt

          # BuiltWith
          curl -fsS -o top1m/builtwith.zip "https://builtwith.com/dl/builtwith-top1m.zip"
          unzip -jo top1m/builtwith.zip '*.csv' -d top1m/
          awk -F, '{print $2}' top1m/*.csv > top1m/builtwith.txt

          # Tranco
          curl -fsS -o top1m/tranco.zip "https://tranco-list.eu/download/daily/top-1m.csv.zip"
          unzip -jo top1m/tranco.zip '*.csv' -d top1m/
          awk -F, '{print $2}' top1m/*.csv > top1m/tranco.txt

          # Combine and deduplicate
          cat top1m/umbrella.txt top1m/builtwith.txt top1m/tranco.txt | sort -u > top1m-blocklist.txt
          for file in extracted/*.txt; do
            grep -vFxf top1m-blocklist.txt "$file" > "$file.tmp" && mv "$file.tmp" "$file"
          done
          rm -rf top1m iana-tlds.txt tlds-alpha-by-domain.txt

      - name: Move outputs to final locations
        if: env.changed != '0'
        run: |
          set -euo pipefail
          move_if_exists() {
            src=$1
            dest=$2
            mkdir -p "$dest"
            if [ -f "$src" ]; then
              mv "$src" "$dest"
            else
              echo "Warning: File $src does not exist."
            fi
          }
          move_if_exists extracted/nrd-14.txt lists/14-day/domains-only/
          move_if_exists extracted/nrd-30.txt lists/30-day/domains-only/
          move_if_exists extracted/entropy-14.txt lists/14-day/high-entropy/
          move_if_exists extracted/entropy-30.txt lists/30-day/high-entropy/
          move_if_exists extracted/phishing-14.txt lists/14-day_phishing/domains-only/
          move_if_exists extracted/phishing-30.txt lists/30-day_phishing/domains-only/
          # ... Add other output formats as needed

      - name: Commit & push updates
        if: env.changed != '0'
        run: |
          set -euo pipefail
          git config user.name "KustoKing[bot]"
          git config user.email "gianni@kustoking.com"
          git add lists hash/current_*.txt
          if ! git diff --cached --quiet; then
            DATE=$(date +'%Y%m%d')
            git commit -m "ci: update NRD lists $DATE"
            git push
          else
            echo "No changes to commit."
          fi

      - name: Save hashes for next run
        if: env.changed != '0'
        run: |
          set -euo pipefail
          for file in nrd-30 entropy-30 phishing-30 nrd-14 entropy-14 phishing-14; do
            fpath="hash/current_$file.txt"
            if [ -f "$fpath" ]; then
              mv "$fpath" "hash/previous_$file.txt"
            fi
          done
          git add hash/previous_*.txt
          if ! git diff --cached --quiet; then
            git commit -m "ci: save hashes for next run"
            git push
          else
            echo "No hash changes to commit."
          fi
