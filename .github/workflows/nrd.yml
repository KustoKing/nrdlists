# GitHub Actions Workflow: Automated NRD Domain List Updates and Publishing
#
# Fetches and processes domain lists from Stamus Networks Open-NRD, including high-entropy and phishing feeds.
# Also applies filtering using top-1M domain lists from Cisco Umbrella, BuiltWith, and Tranco.
# By Gianni Castaldi & ChatGPT – Professional Edition
#
# Domain feeds courtesy of Stamus Networks (https://www.stamus-networks.com/)
# Licensed under GNU GPL v3 – https://www.gnu.org/licenses/gpl-3.0.html
#
# If you reuse or adapt this workflow, please retain this notice and attribution.

name: Update NRD List

on:
  schedule:
    - cron: "10 1,3,5,7,9,11,13,15,17,19,21,23 * * *"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  update-nrd-list:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up system dependencies
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y unzip

      - name: Download NRD, Entropy, and Phishing Feeds
        env:
          STAMUS_NRD_30_URL: ${{ secrets.STAMUS_NRD_30_URL }}
          STAMUS_ENTROPY_30_URL: ${{ secrets.STAMUS_ENTROPY_30_URL }}
          STAMUS_PHISHING_30_URL: ${{ secrets.STAMUS_PHISHING_30_URL }}
          STAMUS_NRD_14_URL: ${{ secrets.STAMUS_NRD_14_URL }}
          STAMUS_ENTROPY_14_URL: ${{ secrets.STAMUS_ENTROPY_14_URL }}
          STAMUS_PHISHING_14_URL: ${{ secrets.STAMUS_PHISHING_14_URL }}
        run: |
          set -euo pipefail
          mkdir -p downloads
          curl -fsS -o downloads/nrd-30.tar.gz "$STAMUS_NRD_30_URL"
          curl -fsS -o downloads/entropy-30.tar.gz "$STAMUS_ENTROPY_30_URL"
          curl -fsS -o downloads/phishing-30.tar.gz "$STAMUS_PHISHING_30_URL"
          curl -fsS -o downloads/nrd-14.tar.gz "$STAMUS_NRD_14_URL"
          curl -fsS -o downloads/entropy-14.tar.gz "$STAMUS_ENTROPY_14_URL"
          curl -fsS -o downloads/phishing-14.tar.gz "$STAMUS_PHISHING_14_URL"

      - name: Extract downloaded archives
        run: |
          set -euo pipefail
          mkdir -p extracted
          for f in downloads/*.tar.gz; do
            tar -xzf "$f" -C extracted
          done

      - name: Debug List extracted files
        run: |
          echo "Extracted files:"
          find extracted -type f | sort

      - name: Standardize and move NRD files
        run: |
          set -euo pipefail
          # Create output directories
          mkdir -p lists/14-day/domains-only lists/30-day/domains-only
          mkdir -p lists/14-day/high-entropy lists/30-day/high-entropy
          mkdir -p lists/14-day_phishing/domains-only lists/30-day_phishing/domains-only

          # Move and rename, always to .txt for consistency
          move_if_exists() {
            src=$1
            dest=$2
            name=$3
            if [ -f "$src" ]; then
              cp "$src" "$dest/$name.txt"
            else
              echo "Warning: File $src does not exist."
            fi
          }
          move_if_exists extracted/rules/nrd-14day              lists/14-day/domains-only          nrd-14day
          move_if_exists extracted/rules/nrd-30day              lists/30-day/domains-only          nrd-30day
          move_if_exists extracted/rules/nrd-entropy-14day      lists/14-day/high-entropy          nrd-entropy-14day
          move_if_exists extracted/rules/nrd-entropy-30day      lists/30-day/high-entropy          nrd-entropy-30day
          move_if_exists extracted/rules/nrd-phishing-14day     lists/14-day_phishing/domains-only nrd-phishing-14day
          move_if_exists extracted/rules/nrd-phishing-30day     lists/30-day_phishing/domains-only nrd-phishing-30day

      - name: Generate and compare hashes (or force if files missing)
        id: hash
        run: |
          set -euo pipefail
          mkdir -p hash
          CHANGED=0
          FILES_EXIST=1
          for path in lists/14-day/domains-only/nrd-14day.txt lists/30-day/domains-only/nrd-30day.txt \
                      lists/14-day/high-entropy/nrd-entropy-14day.txt lists/30-day/high-entropy/nrd-entropy-30day.txt \
                      lists/14-day_phishing/domains-only/nrd-phishing-14day.txt lists/30-day_phishing/domains-only/nrd-phishing-30day.txt; do
            if [ ! -f "$path" ]; then
              echo "Missing expected file: $path"
              FILES_EXIST=0
            fi
          done
          if [ "$FILES_EXIST" -eq 0 ]; then
            CHANGED=1
          else
            for path in lists/*/*/*.txt; do
              name=$(basename "$path" .txt)
              sha256sum "$path" > "hash/current_$name.txt"
              if [ ! -f "hash/previous_$name.txt" ] || ! cmp -s "hash/previous_$name.txt" "hash/current_$name.txt"; then
                echo "$name changed"
                CHANGED=1
              fi
            done
          fi
          echo "changed=$CHANGED" >> $GITHUB_ENV

      - name: Abort if no input changes detected
        if: env.changed == '0'
        run: echo "No changes detected. Exiting early."

      - name: Apply TLD and Top-1M domain filtering
        if: env.changed != '0'
        run: |
          set -euo pipefail
          # Download IANA TLD list
          curl -fsS -O https://data.iana.org/TLD/tlds-alpha-by-domain.txt
          awk '{print tolower($0)}' tlds-alpha-by-domain.txt > iana-tlds.txt
          # TLD filter on all NRD output files
          for file in lists/*/*/*.txt; do
            grep -vFxf iana-tlds.txt "$file" > "$file.tmp" && mv "$file.tmp" "$file"
          done

          # Download and combine Top-1M blocklist sources
          mkdir -p top1m

          curl -fsS -o top1m/umbrella.zip "https://s3-us-west-1.amazonaws.com/umbrella-static/top-1m.csv.zip"
          unzip -jo top1m/umbrella.zip '*.csv' -d top1m/
          awk -F, '{print $2}' top1m/top-1m.csv > top1m/umbrella.txt

          curl -fsS -o top1m/builtwith.zip "https://builtwith.com/dl/builtwith-top1m.zip"
          unzip -jo top1m/builtwith.zip '*.csv' -d top1m/
          awk -F, '{print $2}' top1m/builtwith-top1m-*.csv > top1m/builtwith.txt

          curl -fsS -o top1m/tranco.zip "https://tranco-list.eu/download/daily/top-1m.csv.zip"
          unzip -jo top1m/tranco.zip '*.csv' -d top1m/
          awk -F, '{print $2}' top1m/top-1m.csv > top1m/tranco.txt

          # Merge & deduplicate
          cat top1m/umbrella.txt top1m/builtwith.txt top1m/tranco.txt | sort -u > top1m-blocklist.txt

          for file in lists/*/*/*.txt; do
            grep -vFxf top1m-blocklist.txt "$file" > "$file.tmp" && mv "$file.tmp" "$file"
          done

          rm -rf top1m iana-tlds.txt tlds-alpha-by-domain.txt

      - name: Commit & push updates
        if: env.changed != '0'
        run: |
          set -euo pipefail
          git config user.name "KustoKing[bot]"
          git config user.email "gianni@kustoking.com"
          git add lists || true
          ls hash/current_*.txt 2>/dev/null && git add hash/current_*.txt || true
          if ! git diff --cached --quiet; then
            DATE=$(date +'%Y%m%d')
            git commit -m "ci: update NRD lists $DATE"
            git push
          else
            echo "No changes to commit."
          fi

      - name: Save hashes for next run
        if: env.changed != '0'
        run: |
          set -euo pipefail
          for path in hash/current_*.txt; do
            name=$(basename "$path")
            mv "$path" "hash/previous_${name#current_}"
          done
          git add hash/previous_*.txt || true
          if ! git diff --cached --quiet; then
            git commit -m "ci: save hashes for next run"
            git push
          else
            echo "No hash changes to commit."
          fi
