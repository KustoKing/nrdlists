name: Update

on:
  schedule:
    - cron: '10 1,3,5,7,9,11,13,15,17,19,21,23 * * *'
  workflow_dispatch:

# Prevent concurrent runs from causing race conditions on repo/hashes
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up system and Python dependencies
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y unzip
          pip install --upgrade pip requests matplotlib tldextract

      - name: Download files
        env:
          NORDOMAIN_30DAY_URL: ${{ secrets.NORDOMAIN_30DAY_URL }}
          NORDOMAIN_14DAY_URL: ${{ secrets.NORDOMAIN_14DAY_URL }}
          PHISHING_30DAY_URL: ${{ secrets.PHISHING_30DAY_URL }}
          PHISHING_14DAY_URL: ${{ secrets.PHISHING_14DAY_URL }}
          ADDITIONAL_SOURCE_URL: ${{ secrets.ADDITIONAL_SOURCE_URL }}
          USER_AGENT: ${{ secrets.USER_AGENT }}
        run: |
          set -euo pipefail
          mkdir -p downloads
          curl -fsS -o downloads/nordomain_30day.txt "$NORDOMAIN_30DAY_URL"
          curl -fsS -o downloads/nordomain_14day.txt "$NORDOMAIN_14DAY_URL"
          curl -fsS -o downloads/phishing_30day.txt "$PHISHING_30DAY_URL"
          curl -fsS -o downloads/phishing_14day.txt "$PHISHING_14DAY_URL"
          curl -fsS -A "$USER_AGENT" -o downloads/additional.txt "$ADDITIONAL_SOURCE_URL"

      - name: Compute file hashes
        run: |
          set -euo pipefail
          mkdir -p hash
          for file in nordomain_30day nordomain_14day phishing_30day phishing_14day additional; do
            sha256sum "downloads/$file.txt" > "hash/current_$file.txt"
          done

      - name: Check if files have changed
        id: check_changes
        run: |
          set -euo pipefail
          CHANGED=false
          for file in nordomain_30day nordomain_14day phishing_30day phishing_14day additional; do
            if [ ! -f "hash/previous_$file.txt" ] || ! cmp -s "hash/previous_$file.txt" "hash/current_$file.txt"; then
              echo "$file has changed."
              CHANGED=true
            fi
          done
          echo "changed=$CHANGED" >> $GITHUB_ENV

      - name: Skip processing if unchanged
        if: env.changed == 'false'
        run: echo "Skipping further steps as no files have changed."

      # === Processing Block, only runs if changed ===
      - name: Run main script
        if: env.changed == 'true'
        env:
          NORDOMAIN_30DAY_URL: ${{ secrets.NORDOMAIN_30DAY_URL }}
          NORDOMAIN_14DAY_URL: ${{ secrets.NORDOMAIN_14DAY_URL }}
          PHISHING_30DAY_URL: ${{ secrets.PHISHING_30DAY_URL }}
          PHISHING_14DAY_URL: ${{ secrets.PHISHING_14DAY_URL }}
          ADDITIONAL_SOURCE_URL: ${{ secrets.ADDITIONAL_SOURCE_URL }}
          USER_AGENT: ${{ secrets.USER_AGENT }}
        run: |
          set -euo pipefail
          python3 src/nrd-hunter.py

      - name: Filter out TLD-only lines
        if: env.changed == 'true'
        run: |
          set -euo pipefail
          curl -fsS -O https://data.iana.org/TLD/tlds-alpha-by-domain.txt
          awk '{print tolower($0)}' tlds-alpha-by-domain.txt > iana-tlds.txt
          for file in output/*.txt; do
            grep -vFxf iana-tlds.txt "$file" > "$file.tmp" && mv "$file.tmp" "$file"
          done

      - name: Filter top-1m domains
        if: env.changed == 'true'
        run: |
          set -euo pipefail
          mkdir -p top1m
          curl -fsS -o top1m/umbrella.zip "https://s3-us-west-1.amazonaws.com/umbrella-static/top-1m.csv.zip"
          unzip -jo top1m/umbrella.zip '*.csv' -d top1m/
          awk -F, '{print $2}' top1m/*.csv > top1m/umbrella.txt
          curl -fsS -o top1m/builtwith.zip "https://builtwith.com/dl/builtwith-top1m.zip"
          unzip -jo top1m/builtwith.zip '*.csv' -d top1m/
          awk -F, '{print $2}' top1m/*.csv > top1m/builtwith.txt
          curl -fsS -o top1m/tranco.zip "https://tranco-list.eu/top-1m.csv.zip"
          unzip -jo top1m/tranco.zip '*.csv' -d top1m/
          awk -F, '{print $2}' top1m/*.csv > top1m/tranco.txt
          cat top1m/umbrella.txt top1m/builtwith.txt top1m/tranco.txt | sort -u > top1m-blocklist.txt
          for file in output/*.txt; do
            grep -vFxf top1m-blocklist.txt "$file" > "$file.tmp" && mv "$file.tmp" "$file"
          done
          rm -rf top1m iana-tlds.txt tlds-alpha-by-domain.txt

      - name: Move output files
        if: env.changed == 'true'
        run: |
          set -euo pipefail
          declare -A moves=(
            [output/nrd-14day_wildcard.txt]="lists/14-day/wildcard/"
            [output/nrd-14day.txt]="lists/14-day/domains-only/"
            [output/nrd-30day_part1.txt]="lists/30-day/domains-only/"
            [output/nrd-30day_part2.txt]="lists/30-day/domains-only/"
            [output/nrd-14day_adblock.txt]="lists/14-day/adblock/"
            [output/nrd-30day_adblock_part1.txt]="lists/30-day/adblock/"
            [output/nrd-30day_adblock_part2.txt]="lists/30-day/adblock/"
            [output/nrd-14day_base64.txt]="lists/14-day/base64/"
            [output/nrd-30day_base64_part1.txt]="lists/30-day/base64/"
            [output/nrd-30day_base64_part2.txt]="lists/30-day/base64/"
            [output/nrd-14day_unbound_part1.txt]="lists/14-day/unbound/"
            [output/nrd-14day_unbound_part2.txt]="lists/14-day/unbound/"
            [output/nrd-30day_unbound_part1.txt]="lists/30-day/unbound/"
            [output/nrd-30day_unbound_part2.txt]="lists/30-day/unbound/"
            [output/nrd-30day_unbound_part3.txt]="lists/30-day/unbound/"
            [output/nrd-30day_wildcard_part1.txt]="lists/30-day/wildcard/"
            [output/nrd-30day_wildcard_part2.txt]="lists/30-day/wildcard/"
            [output/nrd-phishing-14day.txt]="lists/14-day_phishing/domains-only/"
            [output/nrd-phishing-30day.txt]="lists/30-day_phishing/domains-only/"
            [output/nrd-phishing-14day_adblock.txt]="lists/14-day_phishing/adblock/"
            [output/nrd-phishing-30day_adblock.txt]="lists/30-day_phishing/adblock/"
            [output/nrd-phishing-14day_base64.txt]="lists/14-day_phishing/base64/"
            [output/nrd-phishing-30day_base64.txt]="lists/30-day_phishing/base64/"
            [output/nrd-phishing-14day_unbound_part1.txt]="lists/14-day_phishing/unbound/"
            [output/nrd-phishing-14day_unbound_part2.txt]="lists/14-day_phishing/unbound/"
            [output/nrd-phishing-30day_unbound_part1.txt]="lists/30-day_phishing/unbound/"
            [output/nrd-phishing-30day_unbound_part2.txt]="lists/30-day_phishing/unbound/"
            [output/nrd-phishing-30day_unbound_part3.txt]="lists/30-day_phishing/unbound/"
            [output/nrd-phishing-14day_wildcard.txt]="lists/14-day_phishing/wildcard/"
            [output/nrd-phishing-30day_wildcard.txt]="lists/30-day_phishing/wildcard/"
          )
          for src in "${!moves[@]}"; do
            dest="${moves[$src]}"
            mkdir -p "$dest"
            if [ -f "$src" ]; then
              mv "$src" "$dest"
            else
              echo "Warning: File $src does not exist."
            fi
          done

      - name: Run statistics script
        if: env.changed == 'true'
        run: |
          set -euo pipefail
          python3 src/generate-stats.py

      - name: Move stats image
        if: env.changed == 'true'
        run: |
          set -euo pipefail
          mkdir -p img && mv stats.png img/

      - name: Commit and push updates
        if: env.changed == 'true'
        run: |
          set -euo pipefail
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add lists img/stats.png hash/current_*.txt
          if ! git diff --cached --quiet; then
            git commit -m "Update NRD Lists and Stats ($(date +'%Y-%m-%d'))"
            git push
          else
            echo "No changes to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save hashes for next run
        if: env.changed == 'true'
        run: |
          set -euo pipefail
          for file in nordomain_30day nordomain_14day phishing_30day phishing_14day additional; do
            mv "hash/current_$file.txt" "hash/previous_$file.txt"
          done
          git add hash/previous_*.txt
          if ! git diff --cached --quiet; then
            git commit -m "Save hashes for next run"
            git push
          else
            echo "No hash changes to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Final cleanup
        if: always()
        run: |
          rm -rf downloads output top1m iana-tlds.txt tlds-alpha-by-domain.txt

          
