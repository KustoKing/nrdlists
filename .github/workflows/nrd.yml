name: ‚ú® Update NRD Lists

on:
  schedule:
    - cron: "7 */2 * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
    - name: ‚úÖ Checkout Repository
      uses: actions/checkout@v4

    - name: ‚òï Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y unzip curl coreutils moreutils

    - name: üìÅ Download NRD, Entropy, and Phishing Feeds
      env:
        NRD_30:        ${{ secrets.STAMUS_NRD_30_URL }}
        ENTROPY_30:    ${{ secrets.STAMUS_ENTROPY_30_URL }}
        PHISHING_30:   ${{ secrets.STAMUS_PHISHING_30_URL }}
        NRD_14:        ${{ secrets.STAMUS_NRD_14_URL }}
        ENTROPY_14:    ${{ secrets.STAMUS_ENTROPY_14_URL }}
        PHISHING_14:   ${{ secrets.STAMUS_PHISHING_14_URL }}
      run: |
        set -euo pipefail
        mkdir -p feeds
        curl -fsSLo feeds/nrd-30.tar.gz        "$NRD_30"
        curl -fsSLo feeds/entropy-30.tar.gz    "$ENTROPY_30"
        curl -fsSLo feeds/phishing-30.tar.gz   "$PHISHING_30"
        curl -fsSLo feeds/nrd-14.tar.gz        "$NRD_14"
        curl -fsSLo feeds/entropy-14.tar.gz    "$ENTROPY_14"
        curl -fsSLo feeds/phishing-14.tar.gz   "$PHISHING_14"

    - name: üì¶ Extract Archives
      run: |
        mkdir -p extracted
        for file in feeds/*.tar.gz; do
          tar -xzf "$file" -C extracted/
        done

    - name: üññÔ∏è Organize and Standardize Extracted Lists
      run: |
        mkdir -p lists/{14-day,30-day}/{domains-only,high-entropy,phishing/domains-only}
        cp extracted/rules/nrd-30day              lists/30-day/domains-only/nrd-30day.txt || true
        cp extracted/rules/nrd-entropy-30day      lists/30-day/high-entropy/nrd-entropy-30day.txt || true
        cp extracted/rules/nrtd-phishing-30day    lists/30-day/phishing/domains-only/nrd-phishing-30day.txt || true
        cp extracted/rules/nrd-14day              lists/14-day/domains-only/nrd-14day.txt || true
        cp extracted/rules/nrd-entropy-14day      lists/14-day/high-entropy/nrd-entropy-14day.txt || true
        cp extracted/rules/nrtd-phishing-14day    lists/14-day/phishing/domains-only/nrd-phishing-14day.txt || true

    - name: üîê Decode Base64 Lines in Standardized Lists (with Benchmark)
      run: |
        set -euo pipefail
        for file in $(find lists -type f -name '*.txt'); do
          if [ $(wc -l < "$file") -eq 0 ]; then
            echo "‚ö†Ô∏è Skipping empty file: $file"
            continue
          fi
          echo "üìú Decoding $file ($(wc -l < "$file") lines)"
          start=$(date +%s)
          awk '{ print | "base64 -d 2>/dev/null" }' "$file" > "$file.decoded" || echo "‚ö†Ô∏è Warning: decoding failed for $file"
          mv "$file.decoded" "$file"
          end=$(date +%s)
          echo "‚è±Ô∏è Done in $((end - start))s"
        done

    - name: ‚öñÔ∏è Compare File Hashes
      run: |
        mkdir -p hash
        for file in $(find lists -type f -name '*.txt'); do
          sha256sum "$file" | cut -d ' ' -f1 > "hash/current_$(basename "$file")"
        done

    - name: ‚ùå Abort if No Changes
      run: |
        if git diff --quiet --exit-code hash; then
          echo "‚ùå No changes detected. Exiting."
          exit 0
        fi

    - name: üîé Apply TLD and Top-1M Filtering
      run: |
        set -euo pipefail
        curl -fsSLo iana-tlds.txt https://data.iana.org/TLD/tlds-alpha-by-domain.txt
        awk '{print tolower($0)}' iana-tlds.txt > iana-tlds.txt
        for file in $(find lists -name '*.txt'); do
          grep -vFxf iana-tlds.txt "$file" > "$file.tmp" && mv "$file.tmp" "$file"
        done

        mkdir -p top1m
        curl -fsSLo top1m/umbrella.zip https://s3-us-west-1.amazonaws.com/umbrella-static/top-1m.csv.zip || true
        curl -fsSLo top1m/tranco.zip https://tranco-list.eu/download/daily/top-1m.csv.zip || true

        unzip -jo top1m/umbrella.zip '*.csv' -d top1m/ || true
        unzip -jo top1m/tranco.zip '*.csv' -d top1m/ || true

        awk -F, '{ print $2 }' top1m/*umbrella*.csv > top1m/umbrella.txt || true
        awk -F, '{ print $2 }' top1m/*tranco*.csv > top1m/tranco.txt || true

        cat top1m/umbrella.txt top1m/tranco.txt | sort -u > top1m-blocklist.txt || true
        for file in $(find lists -name '*.txt'); do
          grep -vFxf top1m-blocklist.txt "$file" > "$file.tmp" && mv "$file.tmp" "$file"
        done

    - name: üí• Split Large Files (>90MB)
      run: |
        set -euo pipefail
        threshold=$((90 * 1024 * 1024))
        for file in $(find lists -name '*.txt'); do
          size=$(stat -c%s "$file")
          if [ "$size" -gt "$threshold" ]; then
            echo "üö® Splitting $file (${size}B)"
            split --bytes=80MB --numeric-suffixes=1 --additional-suffix=.part.txt "$file" "$file."
            rm "$file"
          fi
        done

    - name: üìã Commit & Push Updates
      run: |
        set -euo pipefail
        git config user.name "KustoKing[bot]"
        git config user.email "gianni@kustoking.com"
        git add lists hash || true
        if ! git diff --cached --quiet; then
          git commit -m "ci: update NRD lists $(date +'%Y-%m-%d %H:%M')"
          git push
        else
          echo "‚ùå Nothing to commit."
        fi

    - name: üìÇ Save Hashes for Next Run
      run: |
        mkdir -p hash
        for file in $(find lists -type f -name '*.txt'); do
          sha256sum "$file" | cut -d ' ' -f1 > "hash/current_$(basename "$file")"
        done
